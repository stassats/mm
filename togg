#!/usr/bin/mzscheme -qC
;; -*- Mode: Scheme -*-

;; This software is in the public domain and is
;; provided with absolutely no warranty.

(require (lib "cmdline.ss")
         (lib "process.ss")
         (lib "file.ss")
         (lib "1.ss" "srfi"))

(define *no-tag* #f)
(define *recode* #f)
(define *media-types*
  '(#"flac" #"ape" #"wv" #"wav" #"cue"))

(define (media-file? file-name)
  (member (filename-extension file-name)
          *media-types*))

(define (process-files files output-dir)
  (define (partition-cue files)
    (partition
     (lambda (f) (equal? (filename-extension f) #"cue"))
     files))
  (let-values (((cue files) (partition-cue files)))
    (recode files output-dir cue))
  (tag output-dir))

(define (paths-to-string lis)
  (let ((str ""))
    (for-each (lambda (x)
                (set! str (string-append str " \"" (path->string x) "\"")))
              lis)
    str))

(define (recode files output-dir cue)
  (when *recode*
    (system (format "iconv -f cp1251 '~a' > /tmp/1.cue") (car cue))
    (set! cue '("/tmp/1.cue")))
  (system (format "shntool ~a -q -o \"cust ext=ogg oggenc -q9 -o ~a/%f -\" ~a"
                  (if (and (= (length files) 1) (pair? cue))
                      (format "split -t %n_%t -f \"~a\"" (car cue))
                      "conv")
                  output-dir
                  (paths-to-string files)))
  (if *recode* (delete-file "/tmp/1.cue")))

(define (tag directory)
  (current-directory directory)
  (if (file-exists? "00_pregap.ogg")
      (delete-file "00_pregap.ogg"))
  (unless *no-tag*
    (system "tag -ganyr && rn")))

(define (parse-options arg)
  (command-line "togg" arg
                (once-each
                 [("-n" "--not-tag")
                  "Do not edit tags after encoding"
                  (set! *no-tag* #t)]
                 [("-r" "--recode")
                  "Recode cuesheet with iconv"
                  (set! *recode* #t)])
                (args output-dir
                      (if (null? output-dir)
                          "out"
                          (car output-dir)))))

(define (main args)
  (process-files
   (find-files media-file?)
   (parse-options (cdr args))))

   