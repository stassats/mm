#!/usr/bin/gosh
;;; -*- Mode: Scheme -*-

;;; This software is in the public domain and is
;;; provided with absolutely no warranty.

(use gauche.process)
(use gauche.parseopt)
(use file.util)
(use srfi-1)
(use srfi-11)

(define *no-tag* #f)
(define *recode* #f)
(define *quiet* #f)

(define *media-types*
  '("flac" "ape" "wv" "wav" "cue"))

(define (main args)
  (process-files
   (directory-list (current-directory)
                   :children? #t :filter media-file?)
   (options (cdr args))))

(define (media-file? file-name)
  (member (path-extension file-name) *media-types*))

(define (process-files files output-dir)
  (define (partition-cue files)
    (partition
     (lambda (f) (equal? (path-extension f) "cue"))
     files))
  (let-values (((cue files) (partition-cue files)))
    (recode files output-dir cue))
  (tag output-dir))

(define (recode files output-dir cue)
  (when *recode*
    (run-process `(iconv -f cp1251 ,(car cue)) :output "/tmp/1.cue")
    (push! cue "/tmp/1.cue"))
  (let ((encoder
         (format #f "cust ext=ogg oggenc -q8 -o ~a/%f -" output-dir)))
    (run-process
     `(shntool  ,@(if (and (= (length files) 1) (pair? cue))
                      `(split -t %n_%t -f ,(car cue))
                      '(conv))
                ,@(if *quiet* '(-q) ())
                -o ,encoder
                -O always
                ,@files)
     :wait #t))
  (when *recode* (sys-remove "/tmp/1.cue")))

(define (tag directory)
  (current-directory directory)
  (when (file-exists? "00_pregap.ogg")
    (sys-remove "00_pregap.ogg"))
  (unless *no-tag*
    (run-process '(tag -gtanyr) :wait #t)
    (run-process '(rj) :wait #t)))

(define (options args)
  (let-args args
            ((#f "n|no-tag" => (cut set! *no-tag* #t))
             (#f "r|recode" => (cut set! *recode* #t))
             (#f "q|quiet"  => (cut set! *quiet* #t))
             . rest)
    (unless (= (length rest) 1)
      (error "Should be exactly one argument."))
    (car rest)))
